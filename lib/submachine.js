// Generated by CoffeeScript 1.4.0
(function() {
  var SubMachine,
    __slice = [].slice;

  SubMachine = (function() {
    var contains, isArray;

    isArray = function(maybe_array) {
      return {}.toString.apply(maybe_array) === "[object Array]";
    };

    contains = function(array, item) {
      var elem, _i, _len;
      if (array.indexOf != null) {
        return array.indexOf(item) >= 0;
      } else {
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          elem = array[_i];
          if (elem === item) {
            return true;
          }
        }
      }
      return false;
    };

    function SubMachine(fn) {
      if (typeof fn === "function") {
        fn.call(this);
      }
    }

    SubMachine.prototype.hasStates = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (isArray(args[0])) {
        return this.states = args[0];
      } else {
        return this.states = args;
      }
    };

    SubMachine.prototype.transition = function(obj) {
      if (!((obj != null) && (obj.from != null) && (obj.to != null) && (obj.on != null))) {
        throw new Error("transition must define 'from', 'to' and 'on'");
      }
      return this[obj.on] = function() {
        if (this.state === obj.from || obj.from === "*") {
          return this.switchTo(obj.to);
        }
      };
    };

    SubMachine.prototype.switchTo = function(state) {
      var _base, _base1, _name, _ref, _ref1, _ref2;
      if (!contains(this.states, state)) {
        throw new Error("invalid state " + state);
      }
      if ((_ref = this.callbacks) == null) {
        this.callbacks = {};
      }
      if ((_ref1 = (_base = this.callbacks)[_name = this.state]) == null) {
        _base[_name] = {};
      }
      if ((_ref2 = (_base1 = this.callbacks)[state]) == null) {
        _base1[state] = {};
      }
      if ((this.state != null) && (this.callbacks[this.state].onLeave != null)) {
        this.callbacks[this.state].onLeave();
      }
      this.state = state;
      if (this.callbacks[this.state].onEnter != null) {
        return this.callbacks[this.state].onEnter();
      }
    };

    SubMachine.prototype.onEnter = function(state, cbk) {
      var _base, _ref, _ref1;
      if ((_ref = this.callbacks) == null) {
        this.callbacks = {};
      }
      if ((_ref1 = (_base = this.callbacks)[state]) == null) {
        _base[state] = {};
      }
      return this.callbacks[state].onEnter = cbk;
    };

    SubMachine.prototype.onLeave = function(state, cbk) {
      var _base, _ref, _ref1;
      if ((_ref = this.callbacks) == null) {
        this.callbacks = {};
      }
      if ((_ref1 = (_base = this.callbacks)[state]) == null) {
        _base[state] = {};
      }
      return this.callbacks[state].onLeave = cbk;
    };

    SubMachine.prototype.setupState = function(state, cbks) {
      if (cbks == null) {
        cbks = {};
      }
      if (cbks.onEnter != null) {
        this.onEnter(state, cbks.onEnter);
      }
      if (cbks.onLeave != null) {
        return this.onLeave(state, cbks.onLeave);
      }
    };

    SubMachine.prototype.initState = function(state) {
      return this.switchTo(state);
    };

    return SubMachine;

  })();

  window.SubMachine = SubMachine;

}).call(this);
