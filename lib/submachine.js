// Generated by CoffeeScript 1.4.0
(function() {
  var Submachine, exports,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Submachine = (function() {
    var isArray;

    isArray = function(maybe_array) {
      return {}.toString.apply(maybe_array) === "[object Array]";
    };

    function Submachine(fn) {
      if (typeof fn === "function") {
        fn.call(this);
      }
    }

    Submachine.prototype.hasStates = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (isArray(args[0])) {
        return this.states = args[0];
      } else {
        return this.states = args;
      }
    };

    Submachine.prototype.transition = function(obj) {
      var _base, _name, _name1, _ref, _ref1, _ref2,
        _this = this;
      if (!((obj != null) && (obj.from != null) && (obj.to != null) && (obj.on != null))) {
        throw new Error("transition must define 'from', 'to' and 'on'");
      }
      if ((_ref = this.events) == null) {
        this.events = {};
      }
      if ((_ref1 = (_base = this.events)[_name = obj.on]) == null) {
        _base[_name] = [];
      }
      this.events[obj.on].push({
        from: obj.from,
        to: obj.to
      });
      return (_ref2 = this[_name1 = obj.on]) != null ? _ref2 : this[_name1] = function() {
        var args, tr, _i, _len, _ref3, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref3 = _this.events[obj.on];
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          tr = _ref3[_i];
          if (_this.state === tr.from || tr.from === "*") {
            _this.switchTo.apply(_this, [tr.to].concat(__slice.call(args)));
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
    };

    Submachine.prototype.switchTo = function() {
      var args, state, _base, _base1, _base2, _name, _ref, _ref1, _ref2, _ref3;
      state = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (__indexOf.call(this.states, state) < 0) {
        throw new Error("invalid state " + state);
      }
      if ((_ref = this.callbacks) == null) {
        this.callbacks = {};
      }
      if ((_ref1 = (_base = this.callbacks)[_name = this.state]) == null) {
        _base[_name] = {};
      }
      if ((_ref2 = (_base1 = this.callbacks)[state]) == null) {
        _base1[state] = {};
      }
      if ((_ref3 = (_base2 = this.callbacks)["*"]) == null) {
        _base2["*"] = {};
      }
      if (this.state != null) {
        if (this.callbacks[this.state].onLeave != null) {
          this.callbacks[this.state].onLeave.apply(this, args);
        }
        if (this.callbacks["*"].onLeave != null) {
          this.callbacks["*"].onLeave.apply(this, args);
        }
      }
      this.state = state;
      if (this.callbacks[this.state].onEnter != null) {
        this.callbacks[this.state].onEnter.apply(this, args);
      }
      if (this.callbacks["*"].onEnter != null) {
        return this.callbacks["*"].onEnter.apply(this, args);
      }
    };

    Submachine.prototype.onEnter = function(state, cbk) {
      var _base, _ref, _ref1;
      if ((_ref = this.callbacks) == null) {
        this.callbacks = {};
      }
      if ((_ref1 = (_base = this.callbacks)[state]) == null) {
        _base[state] = {};
      }
      return this.callbacks[state].onEnter = cbk;
    };

    Submachine.prototype.onLeave = function(state, cbk) {
      var _base, _ref, _ref1;
      if ((_ref = this.callbacks) == null) {
        this.callbacks = {};
      }
      if ((_ref1 = (_base = this.callbacks)[state]) == null) {
        _base[state] = {};
      }
      return this.callbacks[state].onLeave = cbk;
    };

    Submachine.prototype.setupState = function(state, cbks) {
      if (cbks == null) {
        cbks = {};
      }
      if (cbks.onEnter != null) {
        this.onEnter(state, cbks.onEnter);
      }
      if (cbks.onLeave != null) {
        return this.onLeave(state, cbks.onLeave);
      }
    };

    Submachine.prototype.initState = function(state) {
      if (this.state != null) {
        throw new Error("state was already initialized");
      }
      return this.switchTo(state);
    };

    Submachine.prototype.toDOT = function(name) {
      var dot, event, state, t, transitions, _i, _j, _len, _len1, _ref, _ref1;
      dot = "digraph " + (name || 'submachine') + " {\n";
      _ref = this.states;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        state = _ref[_i];
        dot += "  " + state + " [label=\"" + state + "\"];\n";
      }
      _ref1 = this.events;
      for (event in _ref1) {
        transitions = _ref1[event];
        for (_j = 0, _len1 = transitions.length; _j < _len1; _j++) {
          t = transitions[_j];
          dot += "  " + t.from + " -> " + t.to + " [label=\"" + event + "\"];\n";
        }
      }
      return dot += "}";
    };

    return Submachine;

  })();

  if (typeof exports !== "undefined" && exports !== null) {
    if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
      exports = module.exports = Submachine;
    }
    exports.Submachine = Submachine;
  } else if (typeof define === "function" && define.amd) {
    define(function() {
      return Submachine;
    });
  } else {
    this.Submachine = Submachine;
  }

}).call(this);
